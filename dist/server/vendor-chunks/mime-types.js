"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mime-types";
exports.ids = ["vendor-chunks/mime-types"];
exports.modules = {

/***/ "(ssr)/./node_modules/mime-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/mime-types/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module dependencies.\n * @private\n */ var db = __webpack_require__(/*! mime-db */ \"(ssr)/./node_modules/mime-db/index.js\");\nvar extname = (__webpack_require__(/*! path */ \"path\").extname);\n/**\n * Module variables.\n * @private\n */ var EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar TEXT_TYPE_REGEXP = /^text\\//i;\n/**\n * Module exports.\n * @public\n */ exports.charset = charset;\nexports.charsets = {\n    lookup: charset\n};\nexports.contentType = contentType;\nexports.extension = extension;\nexports.extensions = Object.create(null);\nexports.lookup = lookup;\nexports.types = Object.create(null);\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types);\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */ function charset(type) {\n    if (!type || typeof type !== \"string\") {\n        return false;\n    }\n    // TODO: use media-typer\n    var match = EXTRACT_TYPE_REGEXP.exec(type);\n    var mime = match && db[match[1].toLowerCase()];\n    if (mime && mime.charset) {\n        return mime.charset;\n    }\n    // default text/* to utf-8\n    if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n        return \"UTF-8\";\n    }\n    return false;\n}\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */ function contentType(str) {\n    // TODO: should this even be in this module?\n    if (!str || typeof str !== \"string\") {\n        return false;\n    }\n    var mime = str.indexOf(\"/\") === -1 ? exports.lookup(str) : str;\n    if (!mime) {\n        return false;\n    }\n    // TODO: use content-type or other module\n    if (mime.indexOf(\"charset\") === -1) {\n        var charset = exports.charset(mime);\n        if (charset) mime += \"; charset=\" + charset.toLowerCase();\n    }\n    return mime;\n}\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */ function extension(type) {\n    if (!type || typeof type !== \"string\") {\n        return false;\n    }\n    // TODO: use media-typer\n    var match = EXTRACT_TYPE_REGEXP.exec(type);\n    // get extensions\n    var exts = match && exports.extensions[match[1].toLowerCase()];\n    if (!exts || !exts.length) {\n        return false;\n    }\n    return exts[0];\n}\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */ function lookup(path) {\n    if (!path || typeof path !== \"string\") {\n        return false;\n    }\n    // get the extension (\"ext\" or \".ext\" or full path)\n    var extension = extname(\"x.\" + path).toLowerCase().substr(1);\n    if (!extension) {\n        return false;\n    }\n    return exports.types[extension] || false;\n}\n/**\n * Populate the extensions and types maps.\n * @private\n */ function populateMaps(extensions, types) {\n    // source preference (least -> most)\n    var preference = [\n        \"nginx\",\n        \"apache\",\n        undefined,\n        \"iana\"\n    ];\n    Object.keys(db).forEach(function forEachMimeType(type) {\n        var mime = db[type];\n        var exts = mime.extensions;\n        if (!exts || !exts.length) {\n            return;\n        }\n        // mime -> extensions\n        extensions[type] = exts;\n        // extension -> mime\n        for(var i = 0; i < exts.length; i++){\n            var extension = exts[i];\n            if (types[extension]) {\n                var from = preference.indexOf(db[types[extension]].source);\n                var to = preference.indexOf(mime.source);\n                if (types[extension] !== \"application/octet-stream\" && (from > to || from === to && types[extension].substr(0, 12) === \"application/\")) {\n                    continue;\n                }\n            }\n            // set the extension -> mime\n            types[extension] = type;\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mime-types/index.js\n");

/***/ })

};
;